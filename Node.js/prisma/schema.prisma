// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  password String
  created_at DateTime @default(now())
  last_booster DateTime
  last_active DateTime @default(now())
  pity Int @default(0)
  cards Card[]
  sentTrades Trade[] @relation("TradeSender")
  receivedTrades Trade[] @relation("TradeReceiver")
  amountofnewrequests Int @default(0)
  amountofnewactive Int @default(0)
  amountofnewcompleted Int @default(0)
  }

model Card {
  id        Int     @id @default(autoincrement())
  name     String
  rarity   String?
  date DateTime @default(now())
  favorite Boolean @default(false)
  owner    User    @relation(fields: [ownerId], references: [id])
  ownerId  Int
  istrading Boolean @default(false)
  sentTrades Trade[] @relation("TradeSenderCard")
  receivedTrades Trade[] @relation("TradeReceiverCard")
  }

model Trade {
  id Int @id @default(autoincrement())
  senderId     Int
  sender       User  @relation("TradeSender", fields: [senderId], references: [id])
  receiverId   Int
  receiver     User  @relation("TradeReceiver", fields: [receiverId], references: [id])
  senderCardId Int
  senderCard   Card  @relation("TradeSenderCard", fields: [senderCardId], references: [id])
  receiverCardId Int?
  receiverCard Card?  @relation("TradeReceiverCard", fields: [receiverCardId], references: [id])
  status String  @default("pending")
  date DateTime @default(now())
}